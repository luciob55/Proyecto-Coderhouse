
@use 'sass:math';
@use 'sass:map';
@use 'variables' as *;


@function breakpoint($key) {
  @return map.get($breakpoints, $key);
}

@mixin respond($break) {
  $val: breakpoint($break);
  @if $val {
    @media (min-width: $val) {
      @content;
    }
  } @else {
    @warn "Breakpoint `#{$break}` no definido en $breakpoints.";
  }
}

@mixin container-max {
  width: 100%;
  margin-left: auto;
  margin-right: auto;
  max-width: $max-width;
  padding-left: $space-md;
  padding-right: $space-md;
}

@mixin flex-center($direction: row, $gap: 0) {
  display: flex;
  flex-direction: $direction;
  align-items: center;
  justify-content: center;
  gap: $gap;
}

@mixin transition($props: all, $time: 200ms, $ease: ease) {
  transition: $props $time $ease;
}

@mixin fluid-type($min-size, $max-size, $min-vw: 320px, $max-vw: 1200px) {
  font-size: calc(#{$min-size} + (#{$max-size} - #{$min-size}) * ((100vw - #{$min-vw}) / (#{$max-vw} - #{$min-vw})));
}

@mixin sr-only {
  position: absolute ;
  width: 1px ;
  height: 1px ;
  padding: 0 ;
  margin: -1px ;
  overflow: hidden ;
  clip: rect(0 0 0 0) ;
  white-space: nowrap ;
  border: 0 ;
}

@mixin spacing-utilities($property, $short) {
  @each $key, $value in $spacers {
    .#{$short}-#{$key} { #{$property}: $value; }
    .#{$short}t-#{$key} { #{$property}-top: $value; }
    .#{$short}b-#{$key} { #{$property}-bottom: $value; }
    .#{$short}l-#{$key} { #{$property}-left: $value; }
    .#{$short}r-#{$key} { #{$property}-right: $value; }
  }
}